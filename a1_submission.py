# -*- coding: utf-8 -*-
"""A1_submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PS721J8zfU0hlsPbIfBEHMQJihqJMus-
"""

# Commented out IPython magic to ensure Python compatibility.
from numpy.core.memmap import uint8
from skimage.io import imread
import matplotlib.pyplot as plt
import numpy as np

def part1_histogram_compute():
  # read the image at the given path
  img1 = imread('test.jpg', as_gray=True)
  img1 = img1 * 256
  img1 = img1.astype(uint8)

  # calculate the histogram of the grayscale image
  h, w = img1.shape
  hist = np.zeros(64)
  for i in np.arange(0, h):
    for j in np.arange(0, w):
      hist[img1[i, j]// 4] += 1

  # using numpy to calculate histogram to compare
  hist2, bins = np.histogram(img1, 64, [0, 255])

  %matplotlib inline
  fig = plt.figure (figsize = (10,5))
  plt.subplot(1,3,1)
  plt.plot(hist)
  plt.title("My Histogram")

  plt.subplot(1,3,2)
  plt.plot(hist2)
  plt.title("Numpy Histogram")
  plt.show()


def part2_histogram_equalization():
  # read the image at the given path
  img1 = imread('test.jpg', as_gray=True)
  img1 = img1 * 256
  img1 = img1.astype(uint8)

  # calculate 64 bin histogram
  h, w = img1.shape
  hist = np.zeros(64)
  for i in np.arange(0, h):
    for j in np.arange(0, w):
      hist[img1[i, j] // 4] += 1

  # cumulative histogram
  H = np.zeros(64)
  H[0] = hist[0]
  for n in np.arange(0, 64):
    H[n] = H[n - 1] + hist[n]

  # equalize image
  J = np.zeros((h, w))
  for i in np.arange(0, h):
    for j in np.arange(0, w):
      # floor of (K-1/height*width)*H(a) + 0.5
      J[i, j] = np.floor((63.0 / (h * w)) * H[img1[i, j] // 4] + 0.5)

  J = J.astype(uint8)

  # equalized histogram
  h2, w2 = J.shape
  hist2 = np.zeros(64)
  for i2 in np.arange(0, h2):
    for j2 in np.arange(0, w2):
      hist2[J[i2, j2]] += 1

  %matplotlib inline
  fig = plt.figure(figsize=(10, 5))
  plt.subplot(2, 3, 1)
  plt.imshow(img1, cmap='gray')
  plt.title("Original Image")

  plt.subplot(2, 3, 2)
  plt.plot(hist)
  plt.title("Numpy Histogram")
  plt.show()

  # plot equalized test.jpg
  %matplotlib inline
  fig = plt.figure(figsize=(10, 5))
  plt.subplot(2, 3, 1)
  plt.imshow(J, cmap='gray')
  plt.title("New Image")

  # plot histogram of equalized test.jpg
  plt.subplot(2, 3, 2)
  plt.plot(hist2)
  plt.title("Histogram After Equalization")
  plt.show()


def part3_histogram_comparing():
  # import the images 
  imgDay = imread('day.jpg', as_gray=True)
  imgNight = imread('night.jpg', as_gray=True)
  imgDay = imgDay * 256
  imgNight = imgNight * 256
  imgDay = imgDay.astype(np.uint8)
  imgNight = imgNight.astype(np.uint8)


  histDay, bins = np.histogram(imgDay, 256, [0, 255])
  histNight, bins = np.histogram(imgNight, 256, [0, 255])
  BC = 0

  for i in range(0, len(histDay)):
    x = histDay[i] / sum(histDay)
    y = histNight[i] / sum(histNight)
    BC += np.emath.sqrt(x * y)

  print(BC)
def part4_histogram_matching():
  # read images as grayscale images
  imgDayGS = imread('day.jpg', as_gray=True)
  imgNightGS = imread('night.jpg', as_gray=True)

  # read images as RGB
  imgDayRGB = imread('day.jpg')
  imgNightRGB = imread('night.jpg')


  # modify image for processing grayscale
  imgNightGS = imgNightGS * 256
  imgDayGS = imgDayGS * 256
  imgDayGS = imgDayGS.astype(np.uint8)
  imgNightGS = imgNightGS.astype(np.uint8)

  # modify image for processing RGB
  imgDayRGB = imgDayRGB.astype(np.uint8)
  imgNightRGB = imgNightRGB.astype(np.uint8)


  # create day image histogram for grayscale
  histDayGS, bins = np.histogram(imgDayGS, 256, [0, 256])
  # create reference histogram for grayscale
  histNightGS, bins = np.histogram(imgNightGS, 256, [0, 256])

  # create day image histogram for RGB
  histDayRGB, bins = np.histogram(imgDayRGB, 256, [0, 256])
  # create reference histogram for RGB
  histNightRGB, bins = np.histogram(imgNightRGB, 256, [0, 256])


  # create cumulative histograms for day and night images
  histDayGSCu = np.zeros(256)
  histNightGSCu = np.zeros(256)

  # create cumulative histograms for day and night images
  histDayRGBCu = np.zeros(256)
  histNightRGBCu = np.zeros(256)


  # calculate cumulative histograms for grayscale
  for i in range(0, len(histDayGS)):
    histDayGSCu[i] = histDayGSCu[i - 1] + histDayGS[i]
    histNightGSCu[i] = histNightGSCu[i - 1] + histNightGS[i]
  
  # calculate cumulative histograms for RGB
  for i in range(0, len(histDayRGB)):
    histDayRGBCu[i] = histDayRGBCu[i - 1] + histDayRGB[i]
    histNightRGBCu[i] = histNightRGBCu[i - 1] + histNightRGB[i]


  # Step 1 and 2 of algorithm: computing PA(a) and PR(a) for grayscale
  # PA = normalized cumulative Day.img
  PA = np.zeros(256)
  # PR = normalized cumulative Night.img
  PR = np.zeros(256)
  # normalize cumulative histogram and create PA and PR
  for i in range(0, len(histDayGS)):
    x = histDayGSCu[i] / sum(histDayGS)
    y = histNightGSCu[i] / sum(histNightGS)
    PA[i] = x
    PR[i] = y

  # Step 1 and 2 of algorithm: computing PA(a) and PR(a) for RGB
  # PA = normalized cumulative Day.img
  PA = np.zeros(256)
  # PR = normalized cumulative Night.img
  PR = np.zeros(256)
  # normalize cumulative histogram and create PA and PR
  for i in range(0, len(histDayRGB)):
    x = histDayRGBCu[i] / sum(histDayRGB)
    y = histNightRGBCu[i] / sum(histNightRGB)
    PA[i] = x
    PR[i] = y


  # step 3 of algorithm: compute function A for grayscale
  A = np.zeros(256)
  ap = 0
  for a in np.arange(0, 255):
    while PA[a] > PR[ap]:
      ap += 1
    A[a] = ap
  A = A.astype(np.float64)
  # step 4: the mapping function
  h, w = imgDayGS.shape
  matched_gs = np.zeros((h, w))
  for i in range(0, h):
    for j in range(0, w):
      a = imgDayGS[i, j]
      matched_gs[i, j] = A[a]

  # step 3 of algorithm: compute function A for RGB
  A = np.zeros(256)
  ap = 0
  for a in np.arange(0, 255):
    while PA[a] > PR[ap]:
      ap += 1
    A[a] = ap
  A = A.astype(np.float64)
  # step 4: the mapping function
  h, w, c = imgDayRGB.shape
  matched_RGB = np.zeros((h, w, c))
  for i in range(0, h):
    for j in range(0, w):
      a = imgDayRGB[i, j]
      matched_RGB[i, j] = A[a]

  matched_RGB = matched_RGB/256

  # plot the 6 images
  %matplotlib inline
  fig = plt.figure(figsize=(10, 5))
  plt.subplot(1, 3, 1)
  plt.axis('off')
  plt.imshow(imgDayGS, cmap='gray')
  plt.title("source_gs")
  plt.subplot(1, 3, 2)
  plt.axis('off')
  plt.imshow(imgNightGS, cmap='gray')
  plt.title("template_gs")
  plt.subplot(1, 3, 3)
  plt.axis('off')
  plt.imshow(matched_gs, cmap='gray')
  plt.title("template_gs")
  plt.show()

  fig = plt.figure(figsize=(10, 5))
  plt.subplot(1, 3, 1)
  plt.axis('off')
  plt.imshow(imgDayRGB)
  plt.title("source_rgb")
  plt.subplot(1, 3, 2)
  plt.axis('off')
  plt.imshow(imgNightRGB)
  plt.title("template_rgb")
  plt.subplot(1, 3, 3)
  plt.axis('off')
  plt.imshow(matched_RGB)
  plt.title("template_rgb")
  plt.show()


if __name__ == '__main__':
  part1_histogram_compute()
  part2_histogram_equalization()
  part3_histogram_comparing()
  part4_histogram_matching()